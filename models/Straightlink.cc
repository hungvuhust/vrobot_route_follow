/**
 *
 *  Straightlink.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Straightlink.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::amr_01::amr_ros2;

const std::string Straightlink::Cols::_id_straight_link = "\"id_straight_link\"";
const std::string Straightlink::Cols::_id_start = "\"id_start\"";
const std::string Straightlink::Cols::_id_end = "\"id_end\"";
const std::string Straightlink::Cols::_map_id = "\"map_id\"";
const std::string Straightlink::primaryKeyName = "id_straight_link";
const bool Straightlink::hasPrimaryKey = true;
const std::string Straightlink::tableName = "amr_ros2.\"straightlink\"";

const std::vector<typename Straightlink::MetaData> Straightlink::metaData_={
{"id_straight_link","int32_t","integer",4,1,1,1},
{"id_start","int32_t","integer",4,0,0,1},
{"id_end","int32_t","integer",4,0,0,1},
{"map_id","int32_t","integer",4,0,0,1}
};
const std::string &Straightlink::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Straightlink::Straightlink(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id_straight_link"].isNull())
        {
            idStraightLink_=std::make_shared<int32_t>(r["id_straight_link"].as<int32_t>());
        }
        if(!r["id_start"].isNull())
        {
            idStart_=std::make_shared<int32_t>(r["id_start"].as<int32_t>());
        }
        if(!r["id_end"].isNull())
        {
            idEnd_=std::make_shared<int32_t>(r["id_end"].as<int32_t>());
        }
        if(!r["map_id"].isNull())
        {
            mapId_=std::make_shared<int32_t>(r["map_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            idStraightLink_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            idStart_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            idEnd_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            mapId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Straightlink::Straightlink(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            idStraightLink_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            idStart_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            idEnd_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            mapId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
}

Straightlink::Straightlink(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id_straight_link"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id_straight_link"].isNull())
        {
            idStraightLink_=std::make_shared<int32_t>((int32_t)pJson["id_straight_link"].asInt64());
        }
    }
    if(pJson.isMember("id_start"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["id_start"].isNull())
        {
            idStart_=std::make_shared<int32_t>((int32_t)pJson["id_start"].asInt64());
        }
    }
    if(pJson.isMember("id_end"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["id_end"].isNull())
        {
            idEnd_=std::make_shared<int32_t>((int32_t)pJson["id_end"].asInt64());
        }
    }
    if(pJson.isMember("map_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["map_id"].isNull())
        {
            mapId_=std::make_shared<int32_t>((int32_t)pJson["map_id"].asInt64());
        }
    }
}

void Straightlink::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            idStraightLink_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            idStart_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            idEnd_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            mapId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
}

void Straightlink::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id_straight_link"))
    {
        if(!pJson["id_straight_link"].isNull())
        {
            idStraightLink_=std::make_shared<int32_t>((int32_t)pJson["id_straight_link"].asInt64());
        }
    }
    if(pJson.isMember("id_start"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["id_start"].isNull())
        {
            idStart_=std::make_shared<int32_t>((int32_t)pJson["id_start"].asInt64());
        }
    }
    if(pJson.isMember("id_end"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["id_end"].isNull())
        {
            idEnd_=std::make_shared<int32_t>((int32_t)pJson["id_end"].asInt64());
        }
    }
    if(pJson.isMember("map_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["map_id"].isNull())
        {
            mapId_=std::make_shared<int32_t>((int32_t)pJson["map_id"].asInt64());
        }
    }
}

const int32_t &Straightlink::getValueOfIdStraightLink() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(idStraightLink_)
        return *idStraightLink_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Straightlink::getIdStraightLink() const noexcept
{
    return idStraightLink_;
}
void Straightlink::setIdStraightLink(const int32_t &pIdStraightLink) noexcept
{
    idStraightLink_ = std::make_shared<int32_t>(pIdStraightLink);
    dirtyFlag_[0] = true;
}
const typename Straightlink::PrimaryKeyType & Straightlink::getPrimaryKey() const
{
    assert(idStraightLink_);
    return *idStraightLink_;
}

const int32_t &Straightlink::getValueOfIdStart() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(idStart_)
        return *idStart_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Straightlink::getIdStart() const noexcept
{
    return idStart_;
}
void Straightlink::setIdStart(const int32_t &pIdStart) noexcept
{
    idStart_ = std::make_shared<int32_t>(pIdStart);
    dirtyFlag_[1] = true;
}

const int32_t &Straightlink::getValueOfIdEnd() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(idEnd_)
        return *idEnd_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Straightlink::getIdEnd() const noexcept
{
    return idEnd_;
}
void Straightlink::setIdEnd(const int32_t &pIdEnd) noexcept
{
    idEnd_ = std::make_shared<int32_t>(pIdEnd);
    dirtyFlag_[2] = true;
}

const int32_t &Straightlink::getValueOfMapId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(mapId_)
        return *mapId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Straightlink::getMapId() const noexcept
{
    return mapId_;
}
void Straightlink::setMapId(const int32_t &pMapId) noexcept
{
    mapId_ = std::make_shared<int32_t>(pMapId);
    dirtyFlag_[3] = true;
}

void Straightlink::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Straightlink::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id_start",
        "id_end",
        "map_id"
    };
    return inCols;
}

void Straightlink::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getIdStart())
        {
            binder << getValueOfIdStart();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getIdEnd())
        {
            binder << getValueOfIdEnd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getMapId())
        {
            binder << getValueOfMapId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Straightlink::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void Straightlink::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getIdStart())
        {
            binder << getValueOfIdStart();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getIdEnd())
        {
            binder << getValueOfIdEnd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getMapId())
        {
            binder << getValueOfMapId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Straightlink::toJson() const
{
    Json::Value ret;
    if(getIdStraightLink())
    {
        ret["id_straight_link"]=getValueOfIdStraightLink();
    }
    else
    {
        ret["id_straight_link"]=Json::Value();
    }
    if(getIdStart())
    {
        ret["id_start"]=getValueOfIdStart();
    }
    else
    {
        ret["id_start"]=Json::Value();
    }
    if(getIdEnd())
    {
        ret["id_end"]=getValueOfIdEnd();
    }
    else
    {
        ret["id_end"]=Json::Value();
    }
    if(getMapId())
    {
        ret["map_id"]=getValueOfMapId();
    }
    else
    {
        ret["map_id"]=Json::Value();
    }
    return ret;
}

Json::Value Straightlink::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 4)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getIdStraightLink())
            {
                ret[pMasqueradingVector[0]]=getValueOfIdStraightLink();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getIdStart())
            {
                ret[pMasqueradingVector[1]]=getValueOfIdStart();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getIdEnd())
            {
                ret[pMasqueradingVector[2]]=getValueOfIdEnd();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getMapId())
            {
                ret[pMasqueradingVector[3]]=getValueOfMapId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getIdStraightLink())
    {
        ret["id_straight_link"]=getValueOfIdStraightLink();
    }
    else
    {
        ret["id_straight_link"]=Json::Value();
    }
    if(getIdStart())
    {
        ret["id_start"]=getValueOfIdStart();
    }
    else
    {
        ret["id_start"]=Json::Value();
    }
    if(getIdEnd())
    {
        ret["id_end"]=getValueOfIdEnd();
    }
    else
    {
        ret["id_end"]=Json::Value();
    }
    if(getMapId())
    {
        ret["map_id"]=getValueOfMapId();
    }
    else
    {
        ret["map_id"]=Json::Value();
    }
    return ret;
}

bool Straightlink::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id_straight_link"))
    {
        if(!validJsonOfField(0, "id_straight_link", pJson["id_straight_link"], err, true))
            return false;
    }
    if(pJson.isMember("id_start"))
    {
        if(!validJsonOfField(1, "id_start", pJson["id_start"], err, true))
            return false;
    }
    else
    {
        err="The id_start column cannot be null";
        return false;
    }
    if(pJson.isMember("id_end"))
    {
        if(!validJsonOfField(2, "id_end", pJson["id_end"], err, true))
            return false;
    }
    else
    {
        err="The id_end column cannot be null";
        return false;
    }
    if(pJson.isMember("map_id"))
    {
        if(!validJsonOfField(3, "map_id", pJson["map_id"], err, true))
            return false;
    }
    else
    {
        err="The map_id column cannot be null";
        return false;
    }
    return true;
}
bool Straightlink::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Straightlink::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id_straight_link"))
    {
        if(!validJsonOfField(0, "id_straight_link", pJson["id_straight_link"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("id_start"))
    {
        if(!validJsonOfField(1, "id_start", pJson["id_start"], err, false))
            return false;
    }
    if(pJson.isMember("id_end"))
    {
        if(!validJsonOfField(2, "id_end", pJson["id_end"], err, false))
            return false;
    }
    if(pJson.isMember("map_id"))
    {
        if(!validJsonOfField(3, "map_id", pJson["map_id"], err, false))
            return false;
    }
    return true;
}
bool Straightlink::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Straightlink::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson,
                                    std::string &err,
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
