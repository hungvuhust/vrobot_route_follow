/**
 *
 *  Map.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace amr_01
{
namespace amr_ros2
{

class Map
{
  public:
    struct Cols
    {
        static const std::string _id_map;
        static const std::string _map_name;
        static const std::string _width;
        static const std::string _height;
        static const std::string _resolution;
        static const std::string _x;
        static const std::string _y;
        static const std::string _theta;
        static const std::string _image;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = int32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Map(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Map(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Map(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Map() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id_map  */
    ///Get the value of the column id_map, returns the default value if the column is null
    const int32_t &getValueOfIdMap() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getIdMap() const noexcept;
    ///Set the value of the column id_map
    void setIdMap(const int32_t &pIdMap) noexcept;

    /**  For column map_name  */
    ///Get the value of the column map_name, returns the default value if the column is null
    const std::string &getValueOfMapName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getMapName() const noexcept;
    ///Set the value of the column map_name
    void setMapName(const std::string &pMapName) noexcept;
    void setMapName(std::string &&pMapName) noexcept;

    /**  For column width  */
    ///Get the value of the column width, returns the default value if the column is null
    const int32_t &getValueOfWidth() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getWidth() const noexcept;
    ///Set the value of the column width
    void setWidth(const int32_t &pWidth) noexcept;

    /**  For column height  */
    ///Get the value of the column height, returns the default value if the column is null
    const int32_t &getValueOfHeight() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getHeight() const noexcept;
    ///Set the value of the column height
    void setHeight(const int32_t &pHeight) noexcept;

    /**  For column resolution  */
    ///Get the value of the column resolution, returns the default value if the column is null
    const float &getValueOfResolution() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<float> &getResolution() const noexcept;
    ///Set the value of the column resolution
    void setResolution(const float &pResolution) noexcept;

    /**  For column x  */
    ///Get the value of the column x, returns the default value if the column is null
    const float &getValueOfX() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<float> &getX() const noexcept;
    ///Set the value of the column x
    void setX(const float &pX) noexcept;

    /**  For column y  */
    ///Get the value of the column y, returns the default value if the column is null
    const float &getValueOfY() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<float> &getY() const noexcept;
    ///Set the value of the column y
    void setY(const float &pY) noexcept;

    /**  For column theta  */
    ///Get the value of the column theta, returns the default value if the column is null
    const float &getValueOfTheta() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<float> &getTheta() const noexcept;
    ///Set the value of the column theta
    void setTheta(const float &pTheta) noexcept;

    /**  For column image  */
    ///Get the value of the column image, returns the default value if the column is null
    const std::string &getValueOfImage() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getImage() const noexcept;
    ///Set the value of the column image
    void setImage(const std::string &pImage) noexcept;
    void setImage(std::string &&pImage) noexcept;


    static size_t getColumnNumber() noexcept {  return 9;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Map>;
    friend drogon::orm::BaseBuilder<Map, true, true>;
    friend drogon::orm::BaseBuilder<Map, true, false>;
    friend drogon::orm::BaseBuilder<Map, false, true>;
    friend drogon::orm::BaseBuilder<Map, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Map>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> idMap_;
    std::shared_ptr<std::string> mapName_;
    std::shared_ptr<int32_t> width_;
    std::shared_ptr<int32_t> height_;
    std::shared_ptr<float> resolution_;
    std::shared_ptr<float> x_;
    std::shared_ptr<float> y_;
    std::shared_ptr<float> theta_;
    std::shared_ptr<std::string> image_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[9]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id_map = $1";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id_map = $1";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id_map,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "map_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "width,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "height,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "resolution,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "x,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "y,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "theta,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "image,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        sql +="default,";
        if(dirtyFlag_[1])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[2])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[3])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[4])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[5])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[6])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[7])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[8])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace amr_ros2
} // namespace amr_01
} // namespace drogon_model
