/**
 *
 *  Map.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Map.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::amr_01::amr_ros2;

const std::string Map::Cols::_id_map = "\"id_map\"";
const std::string Map::Cols::_map_name = "\"map_name\"";
const std::string Map::Cols::_width = "\"width\"";
const std::string Map::Cols::_height = "\"height\"";
const std::string Map::Cols::_resolution = "\"resolution\"";
const std::string Map::Cols::_x = "\"x\"";
const std::string Map::Cols::_y = "\"y\"";
const std::string Map::Cols::_theta = "\"theta\"";
const std::string Map::Cols::_image = "\"image\"";
const std::string Map::primaryKeyName = "id_map";
const bool Map::hasPrimaryKey = true;
const std::string Map::tableName = "amr_ros2.\"map\"";

const std::vector<typename Map::MetaData> Map::metaData_={
{"id_map","int32_t","integer",4,1,1,1},
{"map_name","std::string","text",0,0,0,1},
{"width","int32_t","integer",4,0,0,1},
{"height","int32_t","integer",4,0,0,1},
{"resolution","float","real",4,0,0,1},
{"x","float","real",4,0,0,1},
{"y","float","real",4,0,0,1},
{"theta","float","real",4,0,0,1},
{"image","std::string","text",0,0,0,1}
};
const std::string &Map::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Map::Map(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id_map"].isNull())
        {
            idMap_=std::make_shared<int32_t>(r["id_map"].as<int32_t>());
        }
        if(!r["map_name"].isNull())
        {
            mapName_=std::make_shared<std::string>(r["map_name"].as<std::string>());
        }
        if(!r["width"].isNull())
        {
            width_=std::make_shared<int32_t>(r["width"].as<int32_t>());
        }
        if(!r["height"].isNull())
        {
            height_=std::make_shared<int32_t>(r["height"].as<int32_t>());
        }
        if(!r["resolution"].isNull())
        {
            resolution_=std::make_shared<float>(r["resolution"].as<float>());
        }
        if(!r["x"].isNull())
        {
            x_=std::make_shared<float>(r["x"].as<float>());
        }
        if(!r["y"].isNull())
        {
            y_=std::make_shared<float>(r["y"].as<float>());
        }
        if(!r["theta"].isNull())
        {
            theta_=std::make_shared<float>(r["theta"].as<float>());
        }
        if(!r["image"].isNull())
        {
            image_=std::make_shared<std::string>(r["image"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            idMap_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            mapName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            width_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            height_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            resolution_=std::make_shared<float>(r[index].as<float>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            x_=std::make_shared<float>(r[index].as<float>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            y_=std::make_shared<float>(r[index].as<float>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            theta_=std::make_shared<float>(r[index].as<float>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            image_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Map::Map(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            idMap_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            mapName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            width_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            height_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            resolution_=std::make_shared<float>(pJson[pMasqueradingVector[4]].asFloat());
        }
     }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            x_=std::make_shared<float>(pJson[pMasqueradingVector[5]].asFloat());
        }
     }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            y_=std::make_shared<float>(pJson[pMasqueradingVector[6]].asFloat());
        }
     }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            theta_=std::make_shared<float>(pJson[pMasqueradingVector[7]].asFloat());
        }
     }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            image_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}

Map::Map(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id_map"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id_map"].isNull())
        {
            idMap_=std::make_shared<int32_t>((int32_t)pJson["id_map"].asInt64());
        }
    }
    if(pJson.isMember("map_name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["map_name"].isNull())
        {
            mapName_=std::make_shared<std::string>(pJson["map_name"].asString());
        }
    }
    if(pJson.isMember("width"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["width"].isNull())
        {
            width_=std::make_shared<int32_t>((int32_t)pJson["width"].asInt64());
        }
    }
    if(pJson.isMember("height"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["height"].isNull())
        {
            height_=std::make_shared<int32_t>((int32_t)pJson["height"].asInt64());
        }
    }
    if(pJson.isMember("resolution"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["resolution"].isNull())
        {
            resolution_=std::make_shared<float>(pJson["resolution"].asFloat());
        }
     }
    if(pJson.isMember("x"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["x"].isNull())
        {
            x_=std::make_shared<float>(pJson["x"].asFloat());
        }
     }
    if(pJson.isMember("y"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["y"].isNull())
        {
            y_=std::make_shared<float>(pJson["y"].asFloat());
        }
     }
    if(pJson.isMember("theta"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["theta"].isNull())
        {
            theta_=std::make_shared<float>(pJson["theta"].asFloat());
        }
     }
    if(pJson.isMember("image"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["image"].isNull())
        {
            image_=std::make_shared<std::string>(pJson["image"].asString());
        }
    }
}

void Map::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            idMap_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            mapName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            width_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            height_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            resolution_=std::make_shared<float>(pJson[pMasqueradingVector[4]].asFloat());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            x_=std::make_shared<float>(pJson[pMasqueradingVector[5]].asFloat());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            y_=std::make_shared<float>(pJson[pMasqueradingVector[6]].asFloat());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            theta_=std::make_shared<float>(pJson[pMasqueradingVector[7]].asFloat());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            image_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}

void Map::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id_map"))
    {
        if(!pJson["id_map"].isNull())
        {
            idMap_=std::make_shared<int32_t>((int32_t)pJson["id_map"].asInt64());
        }
    }
    if(pJson.isMember("map_name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["map_name"].isNull())
        {
            mapName_=std::make_shared<std::string>(pJson["map_name"].asString());
        }
    }
    if(pJson.isMember("width"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["width"].isNull())
        {
            width_=std::make_shared<int32_t>((int32_t)pJson["width"].asInt64());
        }
    }
    if(pJson.isMember("height"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["height"].isNull())
        {
            height_=std::make_shared<int32_t>((int32_t)pJson["height"].asInt64());
        }
    }
    if(pJson.isMember("resolution"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["resolution"].isNull())
        {
            resolution_=std::make_shared<float>(pJson["resolution"].asFloat());
        }
    }
    if(pJson.isMember("x"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["x"].isNull())
        {
            x_=std::make_shared<float>(pJson["x"].asFloat());
        }
    }
    if(pJson.isMember("y"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["y"].isNull())
        {
            y_=std::make_shared<float>(pJson["y"].asFloat());
        }
    }
    if(pJson.isMember("theta"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["theta"].isNull())
        {
            theta_=std::make_shared<float>(pJson["theta"].asFloat());
        }
    }
    if(pJson.isMember("image"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["image"].isNull())
        {
            image_=std::make_shared<std::string>(pJson["image"].asString());
        }
    }
}

const int32_t &Map::getValueOfIdMap() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(idMap_)
        return *idMap_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Map::getIdMap() const noexcept
{
    return idMap_;
}
void Map::setIdMap(const int32_t &pIdMap) noexcept
{
    idMap_ = std::make_shared<int32_t>(pIdMap);
    dirtyFlag_[0] = true;
}
const typename Map::PrimaryKeyType & Map::getPrimaryKey() const
{
    assert(idMap_);
    return *idMap_;
}

const std::string &Map::getValueOfMapName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(mapName_)
        return *mapName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Map::getMapName() const noexcept
{
    return mapName_;
}
void Map::setMapName(const std::string &pMapName) noexcept
{
    mapName_ = std::make_shared<std::string>(pMapName);
    dirtyFlag_[1] = true;
}
void Map::setMapName(std::string &&pMapName) noexcept
{
    mapName_ = std::make_shared<std::string>(std::move(pMapName));
    dirtyFlag_[1] = true;
}

const int32_t &Map::getValueOfWidth() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(width_)
        return *width_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Map::getWidth() const noexcept
{
    return width_;
}
void Map::setWidth(const int32_t &pWidth) noexcept
{
    width_ = std::make_shared<int32_t>(pWidth);
    dirtyFlag_[2] = true;
}

const int32_t &Map::getValueOfHeight() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(height_)
        return *height_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Map::getHeight() const noexcept
{
    return height_;
}
void Map::setHeight(const int32_t &pHeight) noexcept
{
    height_ = std::make_shared<int32_t>(pHeight);
    dirtyFlag_[3] = true;
}

const float &Map::getValueOfResolution() const noexcept
{
    static const float defaultValue = float();
    if(resolution_)
        return *resolution_;
    return defaultValue;
}
const std::shared_ptr<float> &Map::getResolution() const noexcept
{
    return resolution_;
}
void Map::setResolution(const float &pResolution) noexcept
{
    resolution_ = std::make_shared<float>(pResolution);
    dirtyFlag_[4] = true;
}

const float &Map::getValueOfX() const noexcept
{
    static const float defaultValue = float();
    if(x_)
        return *x_;
    return defaultValue;
}
const std::shared_ptr<float> &Map::getX() const noexcept
{
    return x_;
}
void Map::setX(const float &pX) noexcept
{
    x_ = std::make_shared<float>(pX);
    dirtyFlag_[5] = true;
}

const float &Map::getValueOfY() const noexcept
{
    static const float defaultValue = float();
    if(y_)
        return *y_;
    return defaultValue;
}
const std::shared_ptr<float> &Map::getY() const noexcept
{
    return y_;
}
void Map::setY(const float &pY) noexcept
{
    y_ = std::make_shared<float>(pY);
    dirtyFlag_[6] = true;
}

const float &Map::getValueOfTheta() const noexcept
{
    static const float defaultValue = float();
    if(theta_)
        return *theta_;
    return defaultValue;
}
const std::shared_ptr<float> &Map::getTheta() const noexcept
{
    return theta_;
}
void Map::setTheta(const float &pTheta) noexcept
{
    theta_ = std::make_shared<float>(pTheta);
    dirtyFlag_[7] = true;
}

const std::string &Map::getValueOfImage() const noexcept
{
    static const std::string defaultValue = std::string();
    if(image_)
        return *image_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Map::getImage() const noexcept
{
    return image_;
}
void Map::setImage(const std::string &pImage) noexcept
{
    image_ = std::make_shared<std::string>(pImage);
    dirtyFlag_[8] = true;
}
void Map::setImage(std::string &&pImage) noexcept
{
    image_ = std::make_shared<std::string>(std::move(pImage));
    dirtyFlag_[8] = true;
}

void Map::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Map::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "map_name",
        "width",
        "height",
        "resolution",
        "x",
        "y",
        "theta",
        "image"
    };
    return inCols;
}

void Map::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getMapName())
        {
            binder << getValueOfMapName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getWidth())
        {
            binder << getValueOfWidth();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getHeight())
        {
            binder << getValueOfHeight();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getResolution())
        {
            binder << getValueOfResolution();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getX())
        {
            binder << getValueOfX();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getY())
        {
            binder << getValueOfY();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTheta())
        {
            binder << getValueOfTheta();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getImage())
        {
            binder << getValueOfImage();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Map::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void Map::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getMapName())
        {
            binder << getValueOfMapName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getWidth())
        {
            binder << getValueOfWidth();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getHeight())
        {
            binder << getValueOfHeight();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getResolution())
        {
            binder << getValueOfResolution();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getX())
        {
            binder << getValueOfX();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getY())
        {
            binder << getValueOfY();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTheta())
        {
            binder << getValueOfTheta();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getImage())
        {
            binder << getValueOfImage();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Map::toJson() const
{
    Json::Value ret;
    if(getIdMap())
    {
        ret["id_map"]=getValueOfIdMap();
    }
    else
    {
        ret["id_map"]=Json::Value();
    }
    if(getMapName())
    {
        ret["map_name"]=getValueOfMapName();
    }
    else
    {
        ret["map_name"]=Json::Value();
    }
    if(getWidth())
    {
        ret["width"]=getValueOfWidth();
    }
    else
    {
        ret["width"]=Json::Value();
    }
    if(getHeight())
    {
        ret["height"]=getValueOfHeight();
    }
    else
    {
        ret["height"]=Json::Value();
    }
    if(getResolution())
    {
        ret["resolution"]=getValueOfResolution();
    }
    else
    {
        ret["resolution"]=Json::Value();
    }
    if(getX())
    {
        ret["x"]=getValueOfX();
    }
    else
    {
        ret["x"]=Json::Value();
    }
    if(getY())
    {
        ret["y"]=getValueOfY();
    }
    else
    {
        ret["y"]=Json::Value();
    }
    if(getTheta())
    {
        ret["theta"]=getValueOfTheta();
    }
    else
    {
        ret["theta"]=Json::Value();
    }
    if(getImage())
    {
        ret["image"]=getValueOfImage();
    }
    else
    {
        ret["image"]=Json::Value();
    }
    return ret;
}

Json::Value Map::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getIdMap())
            {
                ret[pMasqueradingVector[0]]=getValueOfIdMap();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getMapName())
            {
                ret[pMasqueradingVector[1]]=getValueOfMapName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getWidth())
            {
                ret[pMasqueradingVector[2]]=getValueOfWidth();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getHeight())
            {
                ret[pMasqueradingVector[3]]=getValueOfHeight();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getResolution())
            {
                ret[pMasqueradingVector[4]]=getValueOfResolution();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getX())
            {
                ret[pMasqueradingVector[5]]=getValueOfX();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getY())
            {
                ret[pMasqueradingVector[6]]=getValueOfY();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getTheta())
            {
                ret[pMasqueradingVector[7]]=getValueOfTheta();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getImage())
            {
                ret[pMasqueradingVector[8]]=getValueOfImage();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getIdMap())
    {
        ret["id_map"]=getValueOfIdMap();
    }
    else
    {
        ret["id_map"]=Json::Value();
    }
    if(getMapName())
    {
        ret["map_name"]=getValueOfMapName();
    }
    else
    {
        ret["map_name"]=Json::Value();
    }
    if(getWidth())
    {
        ret["width"]=getValueOfWidth();
    }
    else
    {
        ret["width"]=Json::Value();
    }
    if(getHeight())
    {
        ret["height"]=getValueOfHeight();
    }
    else
    {
        ret["height"]=Json::Value();
    }
    if(getResolution())
    {
        ret["resolution"]=getValueOfResolution();
    }
    else
    {
        ret["resolution"]=Json::Value();
    }
    if(getX())
    {
        ret["x"]=getValueOfX();
    }
    else
    {
        ret["x"]=Json::Value();
    }
    if(getY())
    {
        ret["y"]=getValueOfY();
    }
    else
    {
        ret["y"]=Json::Value();
    }
    if(getTheta())
    {
        ret["theta"]=getValueOfTheta();
    }
    else
    {
        ret["theta"]=Json::Value();
    }
    if(getImage())
    {
        ret["image"]=getValueOfImage();
    }
    else
    {
        ret["image"]=Json::Value();
    }
    return ret;
}

bool Map::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id_map"))
    {
        if(!validJsonOfField(0, "id_map", pJson["id_map"], err, true))
            return false;
    }
    if(pJson.isMember("map_name"))
    {
        if(!validJsonOfField(1, "map_name", pJson["map_name"], err, true))
            return false;
    }
    else
    {
        err="The map_name column cannot be null";
        return false;
    }
    if(pJson.isMember("width"))
    {
        if(!validJsonOfField(2, "width", pJson["width"], err, true))
            return false;
    }
    else
    {
        err="The width column cannot be null";
        return false;
    }
    if(pJson.isMember("height"))
    {
        if(!validJsonOfField(3, "height", pJson["height"], err, true))
            return false;
    }
    else
    {
        err="The height column cannot be null";
        return false;
    }
    if(pJson.isMember("resolution"))
    {
        if(!validJsonOfField(4, "resolution", pJson["resolution"], err, true))
            return false;
    }
    else
    {
        err="The resolution column cannot be null";
        return false;
    }
    if(pJson.isMember("x"))
    {
        if(!validJsonOfField(5, "x", pJson["x"], err, true))
            return false;
    }
    else
    {
        err="The x column cannot be null";
        return false;
    }
    if(pJson.isMember("y"))
    {
        if(!validJsonOfField(6, "y", pJson["y"], err, true))
            return false;
    }
    else
    {
        err="The y column cannot be null";
        return false;
    }
    if(pJson.isMember("theta"))
    {
        if(!validJsonOfField(7, "theta", pJson["theta"], err, true))
            return false;
    }
    else
    {
        err="The theta column cannot be null";
        return false;
    }
    if(pJson.isMember("image"))
    {
        if(!validJsonOfField(8, "image", pJson["image"], err, true))
            return false;
    }
    else
    {
        err="The image column cannot be null";
        return false;
    }
    return true;
}
bool Map::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Map::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id_map"))
    {
        if(!validJsonOfField(0, "id_map", pJson["id_map"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("map_name"))
    {
        if(!validJsonOfField(1, "map_name", pJson["map_name"], err, false))
            return false;
    }
    if(pJson.isMember("width"))
    {
        if(!validJsonOfField(2, "width", pJson["width"], err, false))
            return false;
    }
    if(pJson.isMember("height"))
    {
        if(!validJsonOfField(3, "height", pJson["height"], err, false))
            return false;
    }
    if(pJson.isMember("resolution"))
    {
        if(!validJsonOfField(4, "resolution", pJson["resolution"], err, false))
            return false;
    }
    if(pJson.isMember("x"))
    {
        if(!validJsonOfField(5, "x", pJson["x"], err, false))
            return false;
    }
    if(pJson.isMember("y"))
    {
        if(!validJsonOfField(6, "y", pJson["y"], err, false))
            return false;
    }
    if(pJson.isMember("theta"))
    {
        if(!validJsonOfField(7, "theta", pJson["theta"], err, false))
            return false;
    }
    if(pJson.isMember("image"))
    {
        if(!validJsonOfField(8, "image", pJson["image"], err, false))
            return false;
    }
    return true;
}
bool Map::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                           const std::vector<std::string> &pMasqueradingVector,
                                           std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Map::validJsonOfField(size_t index,
                           const std::string &fieldName,
                           const Json::Value &pJson,
                           std::string &err,
                           bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
