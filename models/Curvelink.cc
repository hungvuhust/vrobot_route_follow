/**
 *
 *  Curvelink.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Curvelink.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::amr_01::amr_ros2;

const std::string Curvelink::Cols::_id_curve_link = "\"id_curve_link\"";
const std::string Curvelink::Cols::_id_start = "\"id_start\"";
const std::string Curvelink::Cols::_id_end = "\"id_end\"";
const std::string Curvelink::Cols::_control_point_1_x = "\"control_point_1_x\"";
const std::string Curvelink::Cols::_control_point_1_y = "\"control_point_1_y\"";
const std::string Curvelink::Cols::_control_point_2_x = "\"control_point_2_x\"";
const std::string Curvelink::Cols::_control_point_2_y = "\"control_point_2_y\"";
const std::string Curvelink::Cols::_map_id = "\"map_id\"";
const std::string Curvelink::primaryKeyName = "id_curve_link";
const bool Curvelink::hasPrimaryKey = true;
const std::string Curvelink::tableName = "amr_ros2.\"curvelink\"";

const std::vector<typename Curvelink::MetaData> Curvelink::metaData_={
{"id_curve_link","int32_t","integer",4,1,1,1},
{"id_start","int32_t","integer",4,0,0,1},
{"id_end","int32_t","integer",4,0,0,1},
{"control_point_1_x","float","real",4,0,0,1},
{"control_point_1_y","float","real",4,0,0,1},
{"control_point_2_x","float","real",4,0,0,1},
{"control_point_2_y","float","real",4,0,0,1},
{"map_id","int32_t","integer",4,0,0,1}
};
const std::string &Curvelink::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Curvelink::Curvelink(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id_curve_link"].isNull())
        {
            idCurveLink_=std::make_shared<int32_t>(r["id_curve_link"].as<int32_t>());
        }
        if(!r["id_start"].isNull())
        {
            idStart_=std::make_shared<int32_t>(r["id_start"].as<int32_t>());
        }
        if(!r["id_end"].isNull())
        {
            idEnd_=std::make_shared<int32_t>(r["id_end"].as<int32_t>());
        }
        if(!r["control_point_1_x"].isNull())
        {
            controlPoint1X_=std::make_shared<float>(r["control_point_1_x"].as<float>());
        }
        if(!r["control_point_1_y"].isNull())
        {
            controlPoint1Y_=std::make_shared<float>(r["control_point_1_y"].as<float>());
        }
        if(!r["control_point_2_x"].isNull())
        {
            controlPoint2X_=std::make_shared<float>(r["control_point_2_x"].as<float>());
        }
        if(!r["control_point_2_y"].isNull())
        {
            controlPoint2Y_=std::make_shared<float>(r["control_point_2_y"].as<float>());
        }
        if(!r["map_id"].isNull())
        {
            mapId_=std::make_shared<int32_t>(r["map_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            idCurveLink_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            idStart_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            idEnd_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            controlPoint1X_=std::make_shared<float>(r[index].as<float>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            controlPoint1Y_=std::make_shared<float>(r[index].as<float>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            controlPoint2X_=std::make_shared<float>(r[index].as<float>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            controlPoint2Y_=std::make_shared<float>(r[index].as<float>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            mapId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Curvelink::Curvelink(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            idCurveLink_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            idStart_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            idEnd_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            controlPoint1X_=std::make_shared<float>(pJson[pMasqueradingVector[3]].asFloat());
        }
     }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            controlPoint1Y_=std::make_shared<float>(pJson[pMasqueradingVector[4]].asFloat());
        }
     }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            controlPoint2X_=std::make_shared<float>(pJson[pMasqueradingVector[5]].asFloat());
        }
     }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            controlPoint2Y_=std::make_shared<float>(pJson[pMasqueradingVector[6]].asFloat());
        }
     }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            mapId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

Curvelink::Curvelink(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id_curve_link"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id_curve_link"].isNull())
        {
            idCurveLink_=std::make_shared<int32_t>((int32_t)pJson["id_curve_link"].asInt64());
        }
    }
    if(pJson.isMember("id_start"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["id_start"].isNull())
        {
            idStart_=std::make_shared<int32_t>((int32_t)pJson["id_start"].asInt64());
        }
    }
    if(pJson.isMember("id_end"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["id_end"].isNull())
        {
            idEnd_=std::make_shared<int32_t>((int32_t)pJson["id_end"].asInt64());
        }
    }
    if(pJson.isMember("control_point_1_x"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["control_point_1_x"].isNull())
        {
            controlPoint1X_=std::make_shared<float>(pJson["control_point_1_x"].asFloat());
        }
     }
    if(pJson.isMember("control_point_1_y"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["control_point_1_y"].isNull())
        {
            controlPoint1Y_=std::make_shared<float>(pJson["control_point_1_y"].asFloat());
        }
     }
    if(pJson.isMember("control_point_2_x"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["control_point_2_x"].isNull())
        {
            controlPoint2X_=std::make_shared<float>(pJson["control_point_2_x"].asFloat());
        }
     }
    if(pJson.isMember("control_point_2_y"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["control_point_2_y"].isNull())
        {
            controlPoint2Y_=std::make_shared<float>(pJson["control_point_2_y"].asFloat());
        }
     }
    if(pJson.isMember("map_id"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["map_id"].isNull())
        {
            mapId_=std::make_shared<int32_t>((int32_t)pJson["map_id"].asInt64());
        }
    }
}

void Curvelink::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            idCurveLink_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            idStart_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            idEnd_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            controlPoint1X_=std::make_shared<float>(pJson[pMasqueradingVector[3]].asFloat());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            controlPoint1Y_=std::make_shared<float>(pJson[pMasqueradingVector[4]].asFloat());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            controlPoint2X_=std::make_shared<float>(pJson[pMasqueradingVector[5]].asFloat());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            controlPoint2Y_=std::make_shared<float>(pJson[pMasqueradingVector[6]].asFloat());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            mapId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

void Curvelink::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id_curve_link"))
    {
        if(!pJson["id_curve_link"].isNull())
        {
            idCurveLink_=std::make_shared<int32_t>((int32_t)pJson["id_curve_link"].asInt64());
        }
    }
    if(pJson.isMember("id_start"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["id_start"].isNull())
        {
            idStart_=std::make_shared<int32_t>((int32_t)pJson["id_start"].asInt64());
        }
    }
    if(pJson.isMember("id_end"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["id_end"].isNull())
        {
            idEnd_=std::make_shared<int32_t>((int32_t)pJson["id_end"].asInt64());
        }
    }
    if(pJson.isMember("control_point_1_x"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["control_point_1_x"].isNull())
        {
            controlPoint1X_=std::make_shared<float>(pJson["control_point_1_x"].asFloat());
        }
    }
    if(pJson.isMember("control_point_1_y"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["control_point_1_y"].isNull())
        {
            controlPoint1Y_=std::make_shared<float>(pJson["control_point_1_y"].asFloat());
        }
    }
    if(pJson.isMember("control_point_2_x"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["control_point_2_x"].isNull())
        {
            controlPoint2X_=std::make_shared<float>(pJson["control_point_2_x"].asFloat());
        }
    }
    if(pJson.isMember("control_point_2_y"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["control_point_2_y"].isNull())
        {
            controlPoint2Y_=std::make_shared<float>(pJson["control_point_2_y"].asFloat());
        }
    }
    if(pJson.isMember("map_id"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["map_id"].isNull())
        {
            mapId_=std::make_shared<int32_t>((int32_t)pJson["map_id"].asInt64());
        }
    }
}

const int32_t &Curvelink::getValueOfIdCurveLink() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(idCurveLink_)
        return *idCurveLink_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Curvelink::getIdCurveLink() const noexcept
{
    return idCurveLink_;
}
void Curvelink::setIdCurveLink(const int32_t &pIdCurveLink) noexcept
{
    idCurveLink_ = std::make_shared<int32_t>(pIdCurveLink);
    dirtyFlag_[0] = true;
}
const typename Curvelink::PrimaryKeyType & Curvelink::getPrimaryKey() const
{
    assert(idCurveLink_);
    return *idCurveLink_;
}

const int32_t &Curvelink::getValueOfIdStart() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(idStart_)
        return *idStart_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Curvelink::getIdStart() const noexcept
{
    return idStart_;
}
void Curvelink::setIdStart(const int32_t &pIdStart) noexcept
{
    idStart_ = std::make_shared<int32_t>(pIdStart);
    dirtyFlag_[1] = true;
}

const int32_t &Curvelink::getValueOfIdEnd() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(idEnd_)
        return *idEnd_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Curvelink::getIdEnd() const noexcept
{
    return idEnd_;
}
void Curvelink::setIdEnd(const int32_t &pIdEnd) noexcept
{
    idEnd_ = std::make_shared<int32_t>(pIdEnd);
    dirtyFlag_[2] = true;
}

const float &Curvelink::getValueOfControlPoint1X() const noexcept
{
    static const float defaultValue = float();
    if(controlPoint1X_)
        return *controlPoint1X_;
    return defaultValue;
}
const std::shared_ptr<float> &Curvelink::getControlPoint1X() const noexcept
{
    return controlPoint1X_;
}
void Curvelink::setControlPoint1X(const float &pControlPoint1X) noexcept
{
    controlPoint1X_ = std::make_shared<float>(pControlPoint1X);
    dirtyFlag_[3] = true;
}

const float &Curvelink::getValueOfControlPoint1Y() const noexcept
{
    static const float defaultValue = float();
    if(controlPoint1Y_)
        return *controlPoint1Y_;
    return defaultValue;
}
const std::shared_ptr<float> &Curvelink::getControlPoint1Y() const noexcept
{
    return controlPoint1Y_;
}
void Curvelink::setControlPoint1Y(const float &pControlPoint1Y) noexcept
{
    controlPoint1Y_ = std::make_shared<float>(pControlPoint1Y);
    dirtyFlag_[4] = true;
}

const float &Curvelink::getValueOfControlPoint2X() const noexcept
{
    static const float defaultValue = float();
    if(controlPoint2X_)
        return *controlPoint2X_;
    return defaultValue;
}
const std::shared_ptr<float> &Curvelink::getControlPoint2X() const noexcept
{
    return controlPoint2X_;
}
void Curvelink::setControlPoint2X(const float &pControlPoint2X) noexcept
{
    controlPoint2X_ = std::make_shared<float>(pControlPoint2X);
    dirtyFlag_[5] = true;
}

const float &Curvelink::getValueOfControlPoint2Y() const noexcept
{
    static const float defaultValue = float();
    if(controlPoint2Y_)
        return *controlPoint2Y_;
    return defaultValue;
}
const std::shared_ptr<float> &Curvelink::getControlPoint2Y() const noexcept
{
    return controlPoint2Y_;
}
void Curvelink::setControlPoint2Y(const float &pControlPoint2Y) noexcept
{
    controlPoint2Y_ = std::make_shared<float>(pControlPoint2Y);
    dirtyFlag_[6] = true;
}

const int32_t &Curvelink::getValueOfMapId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(mapId_)
        return *mapId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Curvelink::getMapId() const noexcept
{
    return mapId_;
}
void Curvelink::setMapId(const int32_t &pMapId) noexcept
{
    mapId_ = std::make_shared<int32_t>(pMapId);
    dirtyFlag_[7] = true;
}

void Curvelink::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Curvelink::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id_start",
        "id_end",
        "control_point_1_x",
        "control_point_1_y",
        "control_point_2_x",
        "control_point_2_y",
        "map_id"
    };
    return inCols;
}

void Curvelink::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getIdStart())
        {
            binder << getValueOfIdStart();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getIdEnd())
        {
            binder << getValueOfIdEnd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getControlPoint1X())
        {
            binder << getValueOfControlPoint1X();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getControlPoint1Y())
        {
            binder << getValueOfControlPoint1Y();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getControlPoint2X())
        {
            binder << getValueOfControlPoint2X();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getControlPoint2Y())
        {
            binder << getValueOfControlPoint2Y();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getMapId())
        {
            binder << getValueOfMapId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Curvelink::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void Curvelink::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getIdStart())
        {
            binder << getValueOfIdStart();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getIdEnd())
        {
            binder << getValueOfIdEnd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getControlPoint1X())
        {
            binder << getValueOfControlPoint1X();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getControlPoint1Y())
        {
            binder << getValueOfControlPoint1Y();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getControlPoint2X())
        {
            binder << getValueOfControlPoint2X();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getControlPoint2Y())
        {
            binder << getValueOfControlPoint2Y();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getMapId())
        {
            binder << getValueOfMapId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Curvelink::toJson() const
{
    Json::Value ret;
    if(getIdCurveLink())
    {
        ret["id_curve_link"]=getValueOfIdCurveLink();
    }
    else
    {
        ret["id_curve_link"]=Json::Value();
    }
    if(getIdStart())
    {
        ret["id_start"]=getValueOfIdStart();
    }
    else
    {
        ret["id_start"]=Json::Value();
    }
    if(getIdEnd())
    {
        ret["id_end"]=getValueOfIdEnd();
    }
    else
    {
        ret["id_end"]=Json::Value();
    }
    if(getControlPoint1X())
    {
        ret["control_point_1_x"]=getValueOfControlPoint1X();
    }
    else
    {
        ret["control_point_1_x"]=Json::Value();
    }
    if(getControlPoint1Y())
    {
        ret["control_point_1_y"]=getValueOfControlPoint1Y();
    }
    else
    {
        ret["control_point_1_y"]=Json::Value();
    }
    if(getControlPoint2X())
    {
        ret["control_point_2_x"]=getValueOfControlPoint2X();
    }
    else
    {
        ret["control_point_2_x"]=Json::Value();
    }
    if(getControlPoint2Y())
    {
        ret["control_point_2_y"]=getValueOfControlPoint2Y();
    }
    else
    {
        ret["control_point_2_y"]=Json::Value();
    }
    if(getMapId())
    {
        ret["map_id"]=getValueOfMapId();
    }
    else
    {
        ret["map_id"]=Json::Value();
    }
    return ret;
}

Json::Value Curvelink::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getIdCurveLink())
            {
                ret[pMasqueradingVector[0]]=getValueOfIdCurveLink();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getIdStart())
            {
                ret[pMasqueradingVector[1]]=getValueOfIdStart();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getIdEnd())
            {
                ret[pMasqueradingVector[2]]=getValueOfIdEnd();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getControlPoint1X())
            {
                ret[pMasqueradingVector[3]]=getValueOfControlPoint1X();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getControlPoint1Y())
            {
                ret[pMasqueradingVector[4]]=getValueOfControlPoint1Y();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getControlPoint2X())
            {
                ret[pMasqueradingVector[5]]=getValueOfControlPoint2X();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getControlPoint2Y())
            {
                ret[pMasqueradingVector[6]]=getValueOfControlPoint2Y();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getMapId())
            {
                ret[pMasqueradingVector[7]]=getValueOfMapId();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getIdCurveLink())
    {
        ret["id_curve_link"]=getValueOfIdCurveLink();
    }
    else
    {
        ret["id_curve_link"]=Json::Value();
    }
    if(getIdStart())
    {
        ret["id_start"]=getValueOfIdStart();
    }
    else
    {
        ret["id_start"]=Json::Value();
    }
    if(getIdEnd())
    {
        ret["id_end"]=getValueOfIdEnd();
    }
    else
    {
        ret["id_end"]=Json::Value();
    }
    if(getControlPoint1X())
    {
        ret["control_point_1_x"]=getValueOfControlPoint1X();
    }
    else
    {
        ret["control_point_1_x"]=Json::Value();
    }
    if(getControlPoint1Y())
    {
        ret["control_point_1_y"]=getValueOfControlPoint1Y();
    }
    else
    {
        ret["control_point_1_y"]=Json::Value();
    }
    if(getControlPoint2X())
    {
        ret["control_point_2_x"]=getValueOfControlPoint2X();
    }
    else
    {
        ret["control_point_2_x"]=Json::Value();
    }
    if(getControlPoint2Y())
    {
        ret["control_point_2_y"]=getValueOfControlPoint2Y();
    }
    else
    {
        ret["control_point_2_y"]=Json::Value();
    }
    if(getMapId())
    {
        ret["map_id"]=getValueOfMapId();
    }
    else
    {
        ret["map_id"]=Json::Value();
    }
    return ret;
}

bool Curvelink::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id_curve_link"))
    {
        if(!validJsonOfField(0, "id_curve_link", pJson["id_curve_link"], err, true))
            return false;
    }
    if(pJson.isMember("id_start"))
    {
        if(!validJsonOfField(1, "id_start", pJson["id_start"], err, true))
            return false;
    }
    else
    {
        err="The id_start column cannot be null";
        return false;
    }
    if(pJson.isMember("id_end"))
    {
        if(!validJsonOfField(2, "id_end", pJson["id_end"], err, true))
            return false;
    }
    else
    {
        err="The id_end column cannot be null";
        return false;
    }
    if(pJson.isMember("control_point_1_x"))
    {
        if(!validJsonOfField(3, "control_point_1_x", pJson["control_point_1_x"], err, true))
            return false;
    }
    else
    {
        err="The control_point_1_x column cannot be null";
        return false;
    }
    if(pJson.isMember("control_point_1_y"))
    {
        if(!validJsonOfField(4, "control_point_1_y", pJson["control_point_1_y"], err, true))
            return false;
    }
    else
    {
        err="The control_point_1_y column cannot be null";
        return false;
    }
    if(pJson.isMember("control_point_2_x"))
    {
        if(!validJsonOfField(5, "control_point_2_x", pJson["control_point_2_x"], err, true))
            return false;
    }
    else
    {
        err="The control_point_2_x column cannot be null";
        return false;
    }
    if(pJson.isMember("control_point_2_y"))
    {
        if(!validJsonOfField(6, "control_point_2_y", pJson["control_point_2_y"], err, true))
            return false;
    }
    else
    {
        err="The control_point_2_y column cannot be null";
        return false;
    }
    if(pJson.isMember("map_id"))
    {
        if(!validJsonOfField(7, "map_id", pJson["map_id"], err, true))
            return false;
    }
    else
    {
        err="The map_id column cannot be null";
        return false;
    }
    return true;
}
bool Curvelink::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Curvelink::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id_curve_link"))
    {
        if(!validJsonOfField(0, "id_curve_link", pJson["id_curve_link"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("id_start"))
    {
        if(!validJsonOfField(1, "id_start", pJson["id_start"], err, false))
            return false;
    }
    if(pJson.isMember("id_end"))
    {
        if(!validJsonOfField(2, "id_end", pJson["id_end"], err, false))
            return false;
    }
    if(pJson.isMember("control_point_1_x"))
    {
        if(!validJsonOfField(3, "control_point_1_x", pJson["control_point_1_x"], err, false))
            return false;
    }
    if(pJson.isMember("control_point_1_y"))
    {
        if(!validJsonOfField(4, "control_point_1_y", pJson["control_point_1_y"], err, false))
            return false;
    }
    if(pJson.isMember("control_point_2_x"))
    {
        if(!validJsonOfField(5, "control_point_2_x", pJson["control_point_2_x"], err, false))
            return false;
    }
    if(pJson.isMember("control_point_2_y"))
    {
        if(!validJsonOfField(6, "control_point_2_y", pJson["control_point_2_y"], err, false))
            return false;
    }
    if(pJson.isMember("map_id"))
    {
        if(!validJsonOfField(7, "map_id", pJson["map_id"], err, false))
            return false;
    }
    return true;
}
bool Curvelink::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Curvelink::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson,
                                 std::string &err,
                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
