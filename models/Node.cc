/**
 *
 *  Node.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Node.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::vrobot;

const std::string Node::Cols::_id = "\"id\"";
const std::string Node::Cols::_x = "\"x\"";
const std::string Node::Cols::_y = "\"y\"";
const std::string Node::Cols::_theta = "\"theta\"";
const std::string Node::Cols::_type = "\"type\"";
const std::string Node::Cols::_map_id = "\"map_id\"";
const std::string Node::primaryKeyName = "id";
const bool Node::hasPrimaryKey = true;
const std::string Node::tableName = "\"node\"";

const std::vector<typename Node::MetaData> Node::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"x","float","real",4,0,0,1},
{"y","float","real",4,0,0,1},
{"theta","float","real",4,0,0,1},
{"type","std::string","text",0,0,0,1},
{"map_id","int32_t","integer",4,0,0,1}
};
const std::string &Node::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Node::Node(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["x"].isNull())
        {
            x_=std::make_shared<float>(r["x"].as<float>());
        }
        if(!r["y"].isNull())
        {
            y_=std::make_shared<float>(r["y"].as<float>());
        }
        if(!r["theta"].isNull())
        {
            theta_=std::make_shared<float>(r["theta"].as<float>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["map_id"].isNull())
        {
            mapId_=std::make_shared<int32_t>(r["map_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            x_=std::make_shared<float>(r[index].as<float>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            y_=std::make_shared<float>(r[index].as<float>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            theta_=std::make_shared<float>(r[index].as<float>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            type_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            mapId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Node::Node(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            x_=std::make_shared<float>(pJson[pMasqueradingVector[1]].asFloat());
        }
     }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            y_=std::make_shared<float>(pJson[pMasqueradingVector[2]].asFloat());
        }
     }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            theta_=std::make_shared<float>(pJson[pMasqueradingVector[3]].asFloat());
        }
     }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            mapId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

Node::Node(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("x"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["x"].isNull())
        {
            x_=std::make_shared<float>(pJson["x"].asFloat());
        }
     }
    if(pJson.isMember("y"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["y"].isNull())
        {
            y_=std::make_shared<float>(pJson["y"].asFloat());
        }
     }
    if(pJson.isMember("theta"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["theta"].isNull())
        {
            theta_=std::make_shared<float>(pJson["theta"].asFloat());
        }
     }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("map_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["map_id"].isNull())
        {
            mapId_=std::make_shared<int32_t>((int32_t)pJson["map_id"].asInt64());
        }
    }
}

void Node::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            x_=std::make_shared<float>(pJson[pMasqueradingVector[1]].asFloat());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            y_=std::make_shared<float>(pJson[pMasqueradingVector[2]].asFloat());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            theta_=std::make_shared<float>(pJson[pMasqueradingVector[3]].asFloat());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            mapId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

void Node::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("x"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["x"].isNull())
        {
            x_=std::make_shared<float>(pJson["x"].asFloat());
        }
    }
    if(pJson.isMember("y"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["y"].isNull())
        {
            y_=std::make_shared<float>(pJson["y"].asFloat());
        }
    }
    if(pJson.isMember("theta"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["theta"].isNull())
        {
            theta_=std::make_shared<float>(pJson["theta"].asFloat());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("map_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["map_id"].isNull())
        {
            mapId_=std::make_shared<int32_t>((int32_t)pJson["map_id"].asInt64());
        }
    }
}

const int32_t &Node::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Node::getId() const noexcept
{
    return id_;
}
void Node::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Node::PrimaryKeyType & Node::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const float &Node::getValueOfX() const noexcept
{
    static const float defaultValue = float();
    if(x_)
        return *x_;
    return defaultValue;
}
const std::shared_ptr<float> &Node::getX() const noexcept
{
    return x_;
}
void Node::setX(const float &pX) noexcept
{
    x_ = std::make_shared<float>(pX);
    dirtyFlag_[1] = true;
}

const float &Node::getValueOfY() const noexcept
{
    static const float defaultValue = float();
    if(y_)
        return *y_;
    return defaultValue;
}
const std::shared_ptr<float> &Node::getY() const noexcept
{
    return y_;
}
void Node::setY(const float &pY) noexcept
{
    y_ = std::make_shared<float>(pY);
    dirtyFlag_[2] = true;
}

const float &Node::getValueOfTheta() const noexcept
{
    static const float defaultValue = float();
    if(theta_)
        return *theta_;
    return defaultValue;
}
const std::shared_ptr<float> &Node::getTheta() const noexcept
{
    return theta_;
}
void Node::setTheta(const float &pTheta) noexcept
{
    theta_ = std::make_shared<float>(pTheta);
    dirtyFlag_[3] = true;
}

const std::string &Node::getValueOfType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Node::getType() const noexcept
{
    return type_;
}
void Node::setType(const std::string &pType) noexcept
{
    type_ = std::make_shared<std::string>(pType);
    dirtyFlag_[4] = true;
}
void Node::setType(std::string &&pType) noexcept
{
    type_ = std::make_shared<std::string>(std::move(pType));
    dirtyFlag_[4] = true;
}

const int32_t &Node::getValueOfMapId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(mapId_)
        return *mapId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Node::getMapId() const noexcept
{
    return mapId_;
}
void Node::setMapId(const int32_t &pMapId) noexcept
{
    mapId_ = std::make_shared<int32_t>(pMapId);
    dirtyFlag_[5] = true;
}

void Node::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Node::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "x",
        "y",
        "theta",
        "type",
        "map_id"
    };
    return inCols;
}

void Node::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getX())
        {
            binder << getValueOfX();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getY())
        {
            binder << getValueOfY();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTheta())
        {
            binder << getValueOfTheta();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getMapId())
        {
            binder << getValueOfMapId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Node::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void Node::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getX())
        {
            binder << getValueOfX();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getY())
        {
            binder << getValueOfY();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTheta())
        {
            binder << getValueOfTheta();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getMapId())
        {
            binder << getValueOfMapId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Node::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getX())
    {
        ret["x"]=getValueOfX();
    }
    else
    {
        ret["x"]=Json::Value();
    }
    if(getY())
    {
        ret["y"]=getValueOfY();
    }
    else
    {
        ret["y"]=Json::Value();
    }
    if(getTheta())
    {
        ret["theta"]=getValueOfTheta();
    }
    else
    {
        ret["theta"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getMapId())
    {
        ret["map_id"]=getValueOfMapId();
    }
    else
    {
        ret["map_id"]=Json::Value();
    }
    return ret;
}

Json::Value Node::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getX())
            {
                ret[pMasqueradingVector[1]]=getValueOfX();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getY())
            {
                ret[pMasqueradingVector[2]]=getValueOfY();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTheta())
            {
                ret[pMasqueradingVector[3]]=getValueOfTheta();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[4]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getMapId())
            {
                ret[pMasqueradingVector[5]]=getValueOfMapId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getX())
    {
        ret["x"]=getValueOfX();
    }
    else
    {
        ret["x"]=Json::Value();
    }
    if(getY())
    {
        ret["y"]=getValueOfY();
    }
    else
    {
        ret["y"]=Json::Value();
    }
    if(getTheta())
    {
        ret["theta"]=getValueOfTheta();
    }
    else
    {
        ret["theta"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getMapId())
    {
        ret["map_id"]=getValueOfMapId();
    }
    else
    {
        ret["map_id"]=Json::Value();
    }
    return ret;
}

bool Node::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("x"))
    {
        if(!validJsonOfField(1, "x", pJson["x"], err, true))
            return false;
    }
    else
    {
        err="The x column cannot be null";
        return false;
    }
    if(pJson.isMember("y"))
    {
        if(!validJsonOfField(2, "y", pJson["y"], err, true))
            return false;
    }
    else
    {
        err="The y column cannot be null";
        return false;
    }
    if(pJson.isMember("theta"))
    {
        if(!validJsonOfField(3, "theta", pJson["theta"], err, true))
            return false;
    }
    else
    {
        err="The theta column cannot be null";
        return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(4, "type", pJson["type"], err, true))
            return false;
    }
    else
    {
        err="The type column cannot be null";
        return false;
    }
    if(pJson.isMember("map_id"))
    {
        if(!validJsonOfField(5, "map_id", pJson["map_id"], err, true))
            return false;
    }
    else
    {
        err="The map_id column cannot be null";
        return false;
    }
    return true;
}
bool Node::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Node::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("x"))
    {
        if(!validJsonOfField(1, "x", pJson["x"], err, false))
            return false;
    }
    if(pJson.isMember("y"))
    {
        if(!validJsonOfField(2, "y", pJson["y"], err, false))
            return false;
    }
    if(pJson.isMember("theta"))
    {
        if(!validJsonOfField(3, "theta", pJson["theta"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(4, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("map_id"))
    {
        if(!validJsonOfField(5, "map_id", pJson["map_id"], err, false))
            return false;
    }
    return true;
}
bool Node::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Node::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
